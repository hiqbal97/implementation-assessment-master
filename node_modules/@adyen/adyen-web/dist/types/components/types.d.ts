import { Order, PaymentAction, PaymentAmount } from '../types';
import UIElement from './UIElement';
import Core from '../core';
import Analytics from '../core/Analytics';
import RiskElement from '../core/RiskModule';
export interface PaymentResponse {
    action?: PaymentAction;
    resultCode: string;
    sessionData?: string;
    order?: Order;
}
export interface RawPaymentResponse extends PaymentResponse {
    [key: string]: any;
}
export interface BaseElementProps {
    _parentInstance?: Core;
    order?: Order;
    modules?: {
        analytics: Analytics;
        risk: RiskElement;
    };
    isDropin?: boolean;
}
export interface UIElementProps extends BaseElementProps {
    session?: {
        id: string;
        data: string;
    };
    onChange?: (state: any, element: UIElement) => void;
    onValid?: (state: any, element: UIElement) => void;
    beforeSubmit?: (state: any, element: UIElement, actions: any) => Promise<void>;
    onSubmit?: (state: any, element: UIElement) => void;
    onComplete?: (state: any, element: UIElement) => void;
    onAdditionalDetails?: (state: any, element: UIElement) => void;
    onError?: (error: any, element?: UIElement) => void;
    onPaymentCompleted?: (result: any, element: UIElement) => void;
    beforeRedirect?: (resolve: any, reject: any, redirectData: any, element: UIElement) => void;
    isInstantPayment?: boolean;
    type?: string;
    name?: string;
    icon?: string;
    amount?: PaymentAmount;
    /**
     * Show/Hide pay button
     * @defaultValue true
     */
    showPayButton?: boolean;
    setStatusAutomatically?: boolean;
}
